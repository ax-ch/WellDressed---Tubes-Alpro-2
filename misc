package main

import "fmt"

type ClothingItem struct {
	ID      int
	Name    string
	Color   string
	Weather string

	Category    string
	numCategory int

	Formality     string
	rankFormality int

	LastWorn     string
	rankLastWorn int
}

const NMAX int = 99

type wardrobe [NMAX]ClothingItem

func main() {
	var item wardrobe
	var total int

	welcome()

	addClothingItem(&item, &total, 1)
	viewAllClothingItems(item, total)
	fmt.Println("Wardrobe setup complete!")
	fmt.Println("You can now edit, sort, search, and get outfit recommendations.")
	fmt.Println()

	menuChoice(&item, &total)
	fmt.Println("Thank you for using WellDressed! Goodbye!")
	fmt.Println("=========================================================================")
}

func welcome() {
	var userName string

	fmt.Print("Enter your name (one word, e.g. Terry): ")
	fmt.Scan(&userName)

	fmt.Println("=========================================================================")
	fmt.Printf(" /\\_/\\   Hello %s, welcome to WellDressed!\n", userName)
	fmt.Println("( o.o )  This is your digital wardrobe.")
	fmt.Println(" > ^ <   Let's get started!")
	fmt.Println("=========================================================================")
	fmt.Println()
}

func addClothingItem(item *wardrobe, total *int, NextID int) {
	var n, i int
	*total = 0

	fmt.Println("First, let's set up your wardrobe.")
	fmt.Printf("You can add up to 99 clothing items. You have %d spaces left.\n", NMAX-*total)
	fmt.Print("Enter the number of clothing items in your wardrobe: ")
	fmt.Scan(n)

	for n < 1 || n > NMAX {
		fmt.Println("Invalid number of clothing items. Please enter a positive integer less than 100.")
		fmt.Print("Enter the number of clothing items in your wardrobe: ")
		fmt.Scan(n)
	}

	*total += n

	fmt.Println()
	for i = 0; i < n; i++ {
		item[i].ID = NextID
		fmt.Printf("Adding clothing item (ID: %d)\n", NextID)

		enterClothingName(item, i)
		chooseClothingCategory(item, i)
		chooseClothingWeather(item, i)
		chooseClothingFormality(item, i)
		enterClothingColor(item, i)
		enterClothingLastWorn(item, i)

		NextID++
		fmt.Println()
	}
}

func enterClothingName(item *wardrobe, index int) {
	var name string

	fmt.Print("Enter clothing name (one word, e.g. sundress): ")
	fmt.Scan(&name)

	for len(name) < 1 || name == " " {
		fmt.Println("Invalid name, please try again.")
		fmt.Print("Enter clothing name (one word, e.g. sundress): ")
		fmt.Scan(&name)
	}

	(*item)[index].Name = name
}

func chooseClothingCategory(item *wardrobe, index int) {
	var categoryChoice int

	fmt.Println("Choose clothing category:")
	fmt.Println("1. Top")
	fmt.Println("2. Bottoms")
	fmt.Println("3. Dress")
	fmt.Println("4. Shoes")
	fmt.Println("5. Accessories")
	fmt.Print("Enter your choice (1-5): ")
	fmt.Scan(&categoryChoice)

	for categoryChoice < 1 || categoryChoice > 5 {
		fmt.Println("Invalid choice, please try again.")
		fmt.Println("Choose clothing category:")
		fmt.Println("1. Top")
		fmt.Println("2. Bottoms")
		fmt.Println("3. Dress")
		fmt.Println("4. Shoes")
		fmt.Println("5. Accessories")
		fmt.Print("Enter your choice (1-5): ")
		fmt.Scan(&categoryChoice)
	}

	(*item)[index].numCategory = categoryChoice

	switch categoryChoice {
	case 1:
		(*item)[index].Category = "Top"
	case 2:
		(*item)[index].Category = "Bottoms"
	case 3:
		(*item)[index].Category = "Dress"
	case 4:
		(*item)[index].Category = "Shoes"
	case 5:
		(*item)[index].Category = "Accessories"
	}
}

func chooseClothingWeather(item *wardrobe, index int) {
	var weatherChoice int

	fmt.Println("Choose the suitable weather category")
	fmt.Println("1. Hot")
	fmt.Println("2. Temperate")
	fmt.Println("3. Cold")
	fmt.Print("Enter your choice (1-3): ")
	fmt.Scan(&weatherChoice)

	for weatherChoice < 1 || weatherChoice > 3 {
		fmt.Println("Invalid choice, please try again.")
		fmt.Println("Choose the suitable weather category")
		fmt.Println("1. Hot")
		fmt.Println("2. Temperate")
		fmt.Println("3. Cold")
		fmt.Print("Enter your choice (1-3): ")
		fmt.Scan(&weatherChoice)
	}

	switch weatherChoice {
	case 1:
		(*item)[index].Weather = "Hot"
	case 2:
		(*item)[index].Weather = "Temperate"
	case 3:
		(*item)[index].Weather = "Cold"
	}
}

func chooseClothingFormality(item *wardrobe, index int) {
	var formality int

	fmt.Println("Choose clothing formality")
	fmt.Println("1. Casual")
	fmt.Println("2. Semi-Formal")
	fmt.Println("3. Formal")
	fmt.Print("Enter your choice (1-3): ")
	fmt.Scan(&formality)

	for formality < 1 || formality > 3 {
		fmt.Println("Invalid formality, please try again.")
		fmt.Println("Choose clothing formality")
		fmt.Println("1. Casual")
		fmt.Println("2. Semi-Formal")
		fmt.Println("3. Formal")
		fmt.Print("Enter your choice (1-3): ")
		fmt.Scan(&formality)
	}

	(*item)[index].rankFormality = formality

	switch formality {
	case 1:
		(*item)[index].Formality = "Casual"
	case 2:
		(*item)[index].Formality = "Semi-Formal"
	case 3:
		(*item)[index].Formality = "Formal"
	}
}

func enterClothingColor(item *wardrobe, index int) {
	var color string

	fmt.Print("Enter clothing color (one word, e.g., cyan): ")
	fmt.Scan(&color)

	for len(color) < 1 || color == " " {
		fmt.Println("Invalid color, please try again.")
		fmt.Print("Enter clothing color (one word, e.g., cyan): ")
		fmt.Scan(&color)
	}

	(*item)[index].Color = color
}

func enterClothingLastWorn(item *wardrobe, index int) {
	var lastWorn string

	fmt.Print("Enter last worn date (YYYY-MM-DD): ")
	fmt.Scan(&lastWorn)

	for len(lastWorn) < 10 || lastWorn[4] != '-' || lastWorn[7] != '-' {
		fmt.Println("Invalid date format, please try again.")
		fmt.Print("Enter last worn date (YYYY-MM-DD): ")
		fmt.Scan(&lastWorn)
	}

	(*item)[index].LastWorn = lastWorn
}

func viewAllClothingItems(item wardrobe, total int) {
	var i int

	fmt.Println("===============================================VIEW ALL CLOTHING ITEMS===============================================")
	fmt.Printf("|| %-3s | %-15s | %-15s | %-15s | %-15s | %-15s | %-15s ||\n", "ID", "Last Worn", "Name", "Category", "Weather", "Formality Level", "Color")
	fmt.Println("---------------------------------------------------------------------------------------------------------------------")
	for i = 0; i < total; i++ {
		fmt.Printf("|| %-3d | %-15s | %-15s | %-15s | %-15s | %-15d | %-15s ||\n", item[i].ID, item[i].LastWorn, item[i].Name, item[i].Category, item[i].Weather, item[i].Formality, item[i].Color)
	}
	fmt.Println("=====================================================================================================================")
}

func menu() {
	fmt.Println("╔═════════════════════════════════════════╗")
	fmt.Println("║               WellDressed               ║")
	fmt.Println("║        Digital Wardrobe Assistant       ║")
	fmt.Println("╠═════════════════════════════════════════╣")
	fmt.Println("║ 1. Edit My Wardrobe                     ║")
	fmt.Println("║ 2. Sort My Wardrobe                     ║")
	fmt.Println("║ 3. Search Clothing Item                 ║")
	fmt.Println("║ 4. Recommend Me an Outfit!              ║")
	fmt.Println("╚═════════════════════════════════════════╝")
}

func menuChoice(item *wardrobe, total *int) {
	var choice int

	menu()
	fmt.Print("Choose an option (1-4): ")
	fmt.Scan(&choice)

	for choice < 1 || choice > 4 {
		fmt.Println("Invalid choice, please try again.")
		fmt.Print("Choose an option (1-4): ")
		fmt.Scan(&choice)
	}

	fmt.Println()
	switch choice {
	case 1:
		editWardrobe(item, total)
	case 2:
		sortingMenu(*item, *total)
	case 3:
		searchClothingItem(*item, *total) // not implemented yet
	case 4:
		recommendOutfit(item, total) // not implemented yet
	}
}

func editWardrobe(item *wardrobe, total *int) {
	var choice int

	fmt.Println("Edit My Wardrobe")
	fmt.Println("1. Modify Clothing Item")
	fmt.Println("2. Remove Clothing Item")
	fmt.Println("3. Add Clothing Item")
	fmt.Print("Choose an option (1-3): ")
	fmt.Scan(&choice)

	for choice < 1 || choice > 3 {
		fmt.Println("Invalid choice, please try again.")
		fmt.Print("Edit My Wardrobe")
		fmt.Println("1. Modify Clothing Item")
		fmt.Println("2. Remove Clothing Item")
		fmt.Println("3. Add Clothing Item")
		fmt.Print("Choose an option (1-3): ")
		fmt.Scan(&choice)
	}

	switch choice {
	case 1:
		modifyClothingItem(item, *total)
	case 2:
		removeClothingItem(item, total)
	case 3:
		addClothingItem(item, total, *total+1)
	}
}

func modifyClothingItem(item *wardrobe, total int) {
	var i int
	var id, modifyField, choice int

	viewAllClothingItems(*item, total)

	fmt.Print("Enter the ID of the clothing item to modify: ")
	fmt.Scan(&id)
	fmt.Print("Enter which field to modify (1-Name, 2-Category, 3-Weather, 4-Formality, 5-Color, 6-Last Worn): ")
	fmt.Scan(&modifyField)

	for modifyField < 1 || modifyField > 6 {
		fmt.Println("Invalid choice, please try again.")
		fmt.Print("Enter which field to modify (1-Name, 2-Category, 3-Weather, 4-Formality, 5-Color, 6-Last Worn): ")
		fmt.Scan(&modifyField)
	}

	for i = 0; i < len(*item); i++ {
		if (*item)[i].ID == id {
			modifyByField(item, i, modifyField)

			viewAllClothingItems(*item, total)
			fmt.Println("Clothing item modified successfully!")
			editWardrobe(item, &total)
		}
	}

	fmt.Print("Item not found. Choose 1 to try again and 2 to go back: ")
	fmt.Scan(&choice)
	if choice == 1 {
		modifyClothingItem(item, total)
	} else {
		editWardrobe(item, &total)
	}
}

func modifyByField(item *wardrobe, index int, field int) {
	switch field {
	case 1:
		enterClothingName(item, index)
	case 2:
		chooseClothingCategory(item, index)
	case 3:
		chooseClothingWeather(item, index)
	case 4:
		chooseClothingFormality(item, index)
	case 5:
		enterClothingColor(item, index)
	case 6:
		enterClothingLastWorn(item, index)
	}
}

func removeClothingItem(item *wardrobe, total *int) {
	var i, j, id int
	var choice int

	viewAllClothingItems(*item, *total)
	fmt.Print("Enter the ID of the clothing item to remove: ")
	fmt.Scan(&id)

	for i = 0; i < *total; i++ {
		if (*item)[i].ID == id {
			for j = i; j < *total-1; j++ {
				(*item)[j+1].ID = (*item)[j].ID
				(*item)[j] = (*item)[j+1]
			}
			*total--

			fmt.Println("Clothing item removed successfully!")
			viewAllClothingItems(*item, *total)
			editWardrobe(item, total)
		}
	}

	fmt.Print("Item not found. Choose 1 to try again and 2 to go back: ")
	fmt.Scan(&choice)
	if choice == 1 {
		removeClothingItem(item, total)
	} else {
		editWardrobe(item, total)
	}
}

func sortingMenu(item wardrobe, total int) {
	var choice int

	fmt.Println("Sort My Wardrobe")
	fmt.Println("1. Sort from Most Formal to Least Formal")
	fmt.Println("2. Sort from Least Formal to Most Formal")
	fmt.Println("3. Sort by Last Worn")
	fmt.Print("Choose an option (1-3): ")
	fmt.Scan(&choice)

	for choice < 1 || choice > 3 {
		fmt.Println("Invalid choice, please try again.")
		fmt.Println("Sort My Wardrobe")
		fmt.Println("1. Sort from Most Formal to Least Formal")
		fmt.Println("2. Sort from Least Formal to Most Formal")
		fmt.Println("3. Sort by Last Worn")
		fmt.Print("Choose an option (1-3): ")
		fmt.Scan(&choice)
	}

	switch choice {
	case 1:
		sortMostFormal(&item, total)
	case 2:
		sortLeastFormal(&item, total)
	case 3:
		sortByLastWorn(&item, total)
	}
}

func sortMostFormal(item *wardrobe, total int) {
	selectionSortDescendingFormal(*item, total)
	printSorted(*item, total)
}

func sortLeastFormal(item *wardrobe, total int) {
	selectionSortAscendingFormal(*item, total)
	printSorted(*item, total)
}

func sortByLastWorn(item *wardrobe, total int) {
	insertionSortByLastWorn(*item, total)
	printSorted(*item, total)
}

func selectionSortDescendingFormal(arr wardrobe) {
	var i, j, maxIndex int
	var temp ClothingItem

	for i = 0; i < len(arr)-1; i++ {
		maxIndex = i
		for j = i + 1; j < len(arr); j++ {
			if arr[j].Formality > arr[maxIndex].Formality {
				maxIndex = j
			}
		}
		temp = arr[maxIndex]
		arr[maxIndex] = arr[i]
		arr[i] = temp
	}
}

func selectionSortAscendingFormal(arr wardrobe) {
	var i, j, minIndex int
	var temp ClothingItem

	for i = 0; i < len(arr)-1; i++ {
		minIndex = i
		for j = i + 1; j < len(arr); j++ {
			if arr[j].Formality < arr[minIndex].Formality {
				minIndex = j
			}
		}
		temp = arr[minIndex]
		arr[minIndex] = arr[i]
		arr[i] = temp
	}
}

func insertionSortByLastWorn(arr wardrobe) {
	var i, j int
	var key ClothingItem

	for i = 1; i < len(arr); i++ {
		key = arr[i]
		j = i - 1
		for j >= 0 && arr[j].LastWorn < key.LastWorn {
			arr[j+1] = arr[j]
			j--
		}
		arr[j+1] = key
	}
}

func printSorted(arr wardrobe) {
	fmt.Println("========================Sorted Wardrobe========================")
	fmt.Printf("|| %-10s | %10s | %10s | %10s | %10s | %10s | %10s ||", "ID", "Name", "Color", "Category", "Formality", "Last Worn", "Weather")
	fmt.Println("---------------------------------------------------------------")
	for i := 0; i < len(arr); i++ {
		fmt.Printf("|| %-10d | %-10s | %-10s | %-10s | %-10d | %-10s | %-10s ||\n",
			arr[i].ID, arr[i].Name, arr[i].Color, arr[i].Category, arr[i].Formality, arr[i].LastWorn, arr[i].Weather)
	}
	fmt.Println("===============================================================")
}

func searchClothingItem(item wardrobe, total int) {
	var searchChoice int

	fmt.Println("Choose a search option:")
	fmt.Println("1. Search by Color")
	fmt.Println("2. Search by Category")
	fmt.Println("Choose an option (1-2): ")
	fmt.Scan(&searchChoice)

	for searchChoice < 1 || searchChoice > 2 {
		fmt.Println("Invalid choice, please try again.")
		fmt.Println("Choose a search option:")
		fmt.Println("1. Search by Color")
		fmt.Println("2. Search by Category")
		fmt.Print("Choose an option (1-2): ")
		fmt.Scan(&searchChoice)
	}

	switch searchChoice {
	case 1:
		sequentialSearchColor(item, total)
	case 2:
		binarySearchCategory(item, total)
	}
}

func sequentialSearchColor(item wardrobe, total int) {
	var i int
	var searchedColor string
	var found bool = false

	fmt.Println("Enter color to search: ")
	fmt.Scan(&searchedColor)

	fmt.Println("===================================")
	fmt.Println("Result for %s:", searchedColor)
	for i = 0; i < total; i++ {
		found = item[i].Color == searchedColor
		if found {
			fmt.Printf("ID: %d\nLast Worn: %s\nName: %s\nCategory: %sWeather: %s\nFormality: %s\n",
				item[i].ID, item[i].LastWorn, item[i].Name, item[i].Category, item[i].Weather, item[i].Formality)
		}
	}
	if !found {
		fmt.Println("Item not found.")
	}
	fmt.Println("===================================")
}

func category(n int) string {
	var result string

	switch n {
	case 1:
		result = "Tops"
	case 2:
		result = "Bottoms"
	case 3:
		result = "Dress"
	case 4:
		result = "Shoes"
	case 5:
		result = "Accesories"
	}

	return result
}

func binarySearchCategory(item wardrobe, total int) {
	var choice, left, right, mid int
	var searchedCategory string
	var found bool = false

	fmt.Println("Choose category to search (1-Tops, 2-Bottoms, 3-Dress, 4-Shoes, 5-Accesories): ")
	fmt.Scan(&choice)

	for choice < 1 || choice > 5 {
		fmt.Println("Invalid category, please try again.")
		fmt.Println("Choose category to search (1-Tops, 2-Bottoms, 3-Dress, 4-Shoes, 5-Accesories): ")
		fmt.Scan(&choice)
	}

	searchedCategory = category(choice)

	fmt.Println("===================================")
	fmt.Println("Result for %s:", searchedCategory)
	left = 0
	right = total - 1
	for left <= right {
		mid = (left + right) / 2
		if item[mid].numCategory < choice {
			left = mid + 1
		} else if item[mid].numCategory > choice {
			right = mid - 1
		} else {
			fmt.Printf("ID: %d\nLast Worn: %s\nName: %s\nColor: %sWeather: %s\nFormality: %s\n",
				item[mid].ID, item[mid].LastWorn, item[mid].Name, item[mid].Color, item[mid].Weather, item[mid].Formality)
			found = true
		}
	}

	if !found {
		fmt.Println("Item not found.")
	}
	fmt.Println("===================================")
}

func recommendOutfit() {
	fmt.Println("Not implemented yet.")
}
